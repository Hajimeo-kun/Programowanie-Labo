
#include "pch.h"
#include <stdio.h>
#include <stdlib.h>

/*void foo()
{
	int * values;
	values = (int *)malloc(sizeof(int) * VALUES_SIZE);
	for (int i = 0; i < VALUES_SIZE; i++)
		values[2] = 1; // odwolanie jak do statycznych tablic

	for (int i = 0; i < VALUES_SIZE; i++)
		printf(" value [%d] = %d\n", i, values[i]);
	free(values);
}
void main()
{
	foo();

}*/




/*int* pobierz(int * values, int n)
{
	int x;

	for (int i = 0; i < VALUES_SIZE; i++)
	{

		scanf_s("%d", &x);
		values[i] = x;
	}
	return 0;


}*/

int *gener(int n)
{
	int * values = (int*)malloc(sizeof(int) * n);
	for (int i = 0; i < n; i++)
	{
		values[i] = i * 2;
		values[i] += 3;

	}
	return values;
}

void druk(int* x)
{

	printf("\n\n");
	for (int i = 0; i < VALUES_SIZE; i++)
		printf(" value [%d] = %d\n", i, x[i]);

}
int sum(int* x)
{
	int z = 0;
	for (int i = 0; i < VALUES_SIZE; i++)
	{

		z += x[i];
	}

	return z;

}
int average(int* x)
{
	int wyn;
	wyn = sum(x) / VALUES_SIZE;

	return wyn;
}
int min(int* x)
{
	int z = 9999;
	for (int i = 0; i < VALUES_SIZE; i++)
	{
		if (z > x[i])
		{
			z = x[i];
		}

	}

	return z;
}
int max(int* x)
{
	int z = 0;
	for (int i = 0; i < VALUES_SIZE; i++)
	{
		if (z < x[i])
		{
			z = x[i];
		}

	}

	return z;
}
int sumt(int*a, int*b, int* r)
{

	for (int i = 0; i < VALUES_SIZE; i++)
	{
		r[i] = a[i] + b[i];

	}
	return 0;
	//return r;

}
int main()
{
	int VALUES_SIZE = 10;

	int* Mtab;
	Mtab = 
	int* Mtab1;
	Mtab1 = (int*)malloc(sizeof(int) * VALUES_SIZE);
	int* Mtab2;
	Mtab2 = (int*)malloc(sizeof(int) * VALUES_SIZE);
	gener(Mtab, VALUES_SIZE);
	gener(Mtab1);
	/*pobierz(Mtab, VALUES_SIZE);*/
	druk(Mtab);
	printf("\n sum of array elements = %d  ", sum(Mtab));
	printf("\n average of array elements = %d", average(Mtab));
	printf("\n min = %d", min(Mtab));
	printf("\n max = %d", max(Mtab));
	sumt(Mtab, Mtab1, Mtab2);
	druk(Mtab2);
	free(Mtab);
	free(Mtab1);
	free(Mtab2);
}
